// Generated by CoffeeScript 1.7.1
(function() {
  var FreshAddress, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  FreshAddress = {
    _config: {},
    _options: {},
    _special_options: {
      service: "react",
      format: "json",
      jsoncallback: "?"
    },
    _cache: {}
  };

  FreshAddress.init = function(cfg, options) {
    var key, value, _ref;
    this._config.protocol = "https";
    this._config.origin = "rt.freshaddress.biz";
    this._config.endpoint = "v7.2";
    this._config.dataType = "jsonp";
    this._config.method = "GET";
    this._config.scriptCharset = "utf-8";
    this._config.contentType = "application/json; charset=utf-8";
    this._config.timeout = 3000;
    this._config.cacheEnabled = true;
    for (key in cfg) {
      value = cfg[key];
      this._config[key] = value;
    }
    this._options.token = this._tryFindToken();
    this._options.rtc_timeout = "2000";
    for (key in options) {
      value = options[key];
      this._options[key] = value;
    }
    _ref = this._special_options;
    for (key in _ref) {
      value = _ref[key];
      this._options[key] = value;
    }
    return true;
  };

  FreshAddress.resetCache = function() {
    this._cache = {};
    return true;
  };

  FreshAddress.validateEmail = function(email, options, callback) {
    var cb, op;
    op = options;
    cb = callback;
    if (!callback && options && (options instanceof Function)) {
      op = null;
      cb = options;
    }
    return this._performCallValidateEmail(email, cb, this._makeUrl(email, op), this._makeSettings(), this._friendlyTransform);
  };

  FreshAddress.callValidateEmail = function(email, options, callback) {
    var cb, op;
    op = options;
    cb = callback;
    if (!callback && options && (options instanceof Function)) {
      op = null;
      cb = options;
    }
    return this._performCallValidateEmail(email, cb, this._makeUrl(email, op), this._makeSettings(), this._identityTransform);
  };

  FreshAddress._identityTransform = function(data) {
    return data;
  };

  FreshAddress._friendlyTransform = function(data) {
    var isEmpty;
    isEmpty = function(value) {
      return (value === null) || (value === "");
    };
    return {
      getResponse: function() {
        return data;
      },
      getFinding: function() {
        return data.FINDING;
      },
      getComment: function() {
        return data.COMMENT;
      },
      getCommentCode: function() {
        return data.COMMENT_CODE;
      },
      getSuggComment: function() {
        return data.SUGG_COMMENT;
      },
      getSuggEmail: function() {
        return data.SUGG_EMAIL;
      },
      getUUID: function() {
        return data.UUID;
      },
      getErrorResponse: function() {
        return data.ERROR_RESPONSE;
      },
      getServiceError: function() {
        return data.ERROR;
      },
      isValid: function() {
        return (data.FINDING === "V") || (data.finding === "VS");
      },
      isSafeToSend: function() {
        return data.FINDING === "VS";
      },
      isError: function() {
        return data.FINDING === "E";
      },
      isWarning: function() {
        return data.FINDING === "W";
      },
      isOverride: function() {
        return data.COMMENT === "customer override";
      },
      hasSuggest: function() {
        return !isEmpty(data.SUGG_EMAIL);
      },
      isServiceError: function() {
        return !isEmpty(data.ERROR);
      },
      isCachedResponse: function() {
        return data.CACHED_ATTEMPT_NUMBER > 1;
      },
      getCachedAttemptNumber: function() {
        return data.CACHED_ATTEMPT_NUMBER;
      }
    };
  };

  FreshAddress._makeUrl = function(email, options) {
    var key, query_string, url;
    options || (options = {});
    url = "" + this._config.protocol + "://" + this._config.origin + "/" + this._config.endpoint;
    query_string = "?";
    for (key in this._special_options) {
      if (key !== "jsoncallback") {
        query_string += key + "=" + encodeURIComponent(this._special_options[key]) + "&";
      } else {
        query_string += key + "=" + this._special_options[key] + "&";
      }
    }
    for (key in this._options) {
      if (!(this._special_options[key] || options[key])) {
        query_string += key + "=" + encodeURIComponent(this._options[key]) + "&";
      }
    }
    for (key in options) {
      if (!this._special_options[key]) {
        query_string += key + "=" + encodeURIComponent(options[key]) + "&";
      }
    }
    query_string += "email=" + encodeURIComponent(email);
    return url + query_string;
  };

  FreshAddress._makeSettings = function() {
    var settings;
    settings = {};
    settings.crossDomain = true;
    settings.dataType = this._config.dataType;
    settings.type = this._config.method;
    settings.scriptCharset = this._config.scriptCharset;
    settings.contentType = this._config.contentType;
    settings.timeout = this._config.timeout;
    return settings;
  };

  FreshAddress._tryFindToken = function() {
    var ps, q, scripts, thisScriptTag, token;
    scripts = $("script");
    thisScriptTag = null;
    scripts.each(function(i, x) {
      var _ref, _ref1;
      if (((_ref = x.src) != null ? _ref.match("freshaddress-client") : void 0) && ((_ref1 = x.src) != null ? _ref1.match("token=") : void 0)) {
        thisScriptTag = x;
        return false;
      }
    });
    if (!thisScriptTag) {
      return;
    }
    q = thisScriptTag.src.split("?");
    if ((q != null ? q.length : void 0) !== 2) {
      return;
    }
    ps = q[1].split("&");
    token = null;
    ps.forEach(function(x) {
      var kv;
      kv = x.split("=");
      if (kv.length === 2 && kv[0] === "token") {
        token = kv[1];
        return false;
      }
    });
    return token;
  };

  FreshAddress._performCallValidateEmail = function(email, callback, url, settings, transform) {
    var cacheDeferred, ctx, deferred, key, promise, result, self, tResult, value, _ref;
    ctx = {
      t1: new Date().getTime()
    };
    if (this._config.cacheEnabled && this._cache[email]) {
      cacheDeferred = $.Deferred();
      this._cache[email].response.CACHED_ATTEMPT_NUMBER += 1;
      result = {};
      _ref = this._cache[email].response;
      for (key in _ref) {
        value = _ref[key];
        result[key] = value;
      }
      tResult = transform(result, ctx);
      cacheDeferred.resolve(tResult);
      if (callback) {
        callback(tResult);
      }
      return cacheDeferred.promise();
    }
    promise = $.ajax(url, settings);
    self = this;
    deferred = $.Deferred();
    promise.then(function(x) {
      var cacheCopy;
      ctx.t2 || (ctx.t2 = new Date().getTime());
      x.CLIENTTIME = ctx.t2 - ctx.t1;
      if (self._config.cacheEnabled && !self._cache[email] && !x.ERROR) {
        cacheCopy = {};
        for (key in x) {
          value = x[key];
          cacheCopy[key] = value;
        }
        cacheCopy.CACHED_ATTEMPT_NUMBER = 1;
        x.CACHED_ATTEMPT_NUMBER = cacheCopy.CACHED_ATTEMPT_NUMBER;
        self._cache[email] = {
          response: cacheCopy
        };
      }
      tResult = transform(x, ctx);
      deferred.resolve(tResult);
      if (callback) {
        return callback(tResult);
      }
    });
    promise.fail(function(x) {
      ctx.t2 || (ctx.t2 = new Date().getTime());
      tResult = transform(x, ctx);
      deferred.reject(tResult);
      if (callback) {
        return callback(tResult);
      }
    });
    return deferred.promise();
  };

  FreshAddress.init();

  root.FreshAddress = FreshAddress;

}).call(this);
