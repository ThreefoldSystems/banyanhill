<?php
/*
	Plugin Name: Agora Middleware 2.x Base Plugin
	Plugin URI: https://github.com/ThreefoldSystems/Middleware-Base
	Description: Provides a connection layer for Agora Middleware 2.0, and an admin interface for configuration
	Author: Threefold Systems
	Version: 1.23.1
	Author URI: http://threefoldsystems.com
	Text Domain: agora-middleware
	Domain Path: /lang
 */
define('AGORA_MIDDLEWARE_BASE_VERSION', '1.23.1');
require('vendor/autoload.php');
require('classes/agora_core_framework.php');
include_once('auto-update/plugin-update-checker.php');


/**
 * The plugin/controller for the base middleware integration class
 *
 * @package    agora_core_framework
 * @subpackage agora_core_framework_plugin
 * @license    Properietary
 * @author     Ciaran McGrath <cmcgrath@pubsvs.com>
 */
class agora_core_framework_plugin {

	/**
	 * base will contain the core functions for interacting with middleware, Wordpress, and the view framework.
	 * @var object
	 */
	protected $core; 

	/**
	 * @var object
	 */
	public $plugin_activation_option_name_base = 'mw_base_activation';

	/**
	 * Object Constructor
	 **/
	public function __construct() {
		$this->core = agora_core_framework::get_instance();

		$this->plugin_basename = plugin_basename( __FILE__ );

		// Initialize auto update class
		$this->core->auto_update(
			'https://github.com/ThreefoldSystems/Middleware-Base',
			__FILE__,
			'master'
		);

		register_activation_hook( __FILE__, array($this, 'activation' ) );
		register_deactivation_hook( __FILE__, array($this, 'de_activation' ) );

		add_action( 'admin_init', array($this, 'admin_initialize') );
		add_action( 'admin_menu', array( $this, 'initialize_menu') );
		add_action( 'admin_notices', array($this->core, 'admin_notices'));
		add_filter( 'plugin_action_links_' . $this->plugin_basename, array($this, 'get_settings_link') );
		add_action( 'activated_plugin', array( $this, '_ensure_first_load') );
		add_action( 'admin_enqueue_scripts', array($this, '_admin_enqueue') );
		add_action( 'wp_ajax_mc_ping_test', array($this->core->mc, 'ajax_mc_ping_test' ));
		add_action( 'wp_ajax_mw_ping_test', array($this, 'ajax_ping_test' ));
		add_action( 'wp_ajax_mc_create_mailing', array($this, 'create_mailing' ));

		// Functions for importing and exporting settings
	    add_action( 'admin_init', array( $this, 'mw_export_options' ) );
	    add_action( 'admin_init', array( $this, 'mw_base_import_options_callback' ) );

		//Disable health check until conflict with W3TC is resolved.
		add_action( 'admin_init', array($this, 'check_health' ));

		add_action( 'current_screen', array($this, 'tfs_pageview' ));
	}

	/**
	 * Function for Health check
	 */
	public function check_health()
	{
		if ( ! isset( $this->core->config[ 'pinghome' ] ) || $this->core->config[ 'pinghome' ] < strtotime( '-1 week' ) ) {
			$this->core->config[ 'pinghome' ] = strtotime( "now" );

			update_option( $this->core->config_name, $this->core->config );

			// Keen.io reporting
			$plugin_details = get_plugin_data(__FILE__, false);

			$this->core->keen_reporting(
				'Plugin Weekly Ping',
				array(
					'action' => 'Weekly Ping',
					'plugin_name' => $plugin_details[ 'Name' ],
					'plugin_version' => $plugin_details[ 'Version' ]
				)
			);
		}
	}


    /**
	 * Function for Settings Link in plugins admin
	 * @param array $links An array of plugin-related links generated by wordpress
	 * @return array 
	 */
	public function get_settings_link($links) { 
  		$settings_link = '<a href="admin.php?page='. $this->core->plugin_admin_page .'">Settings</a>'; 
  		$links[] = $settings_link; 
  		return $links;
	}

	/**
	 * Activation Function
	 *
	 * @param void
	 * @return void
	 * 
	 **/
	public function activation() {
		// Pick out the default language vars from the ini file and set them up
		$default_variables = parse_ini_file(dirname(__FILE__) . '/default_variables.ini');
		$this->core->register_language_variables( $default_variables );

		// Update activation option in the database
		update_option( $this->plugin_activation_option_name_base, 'activated' );

		$notices = $this->core->wp->get_option('agora_mw_deferred_admin_notices', array());
  		$notices[] = __('Middleware Base Plugin Activated');
  		$this->core->wp->update_option('agora_mw_deferred_admin_notices', $notices);

		// Keen.io reporting
		$plugin_details = get_plugin_data(__FILE__, false);

		$this->core->keen_reporting(
			'Plugin Activations',
			array(
				'action' => 'Plugin Activated',
				'plugin_name' => $plugin_details[ 'Name' ],
				'plugin_version' => $plugin_details[ 'Version' ]
			)
		);
	}

	/**
	 * Deactivation Function
	 *
	 * @param void
	 * @return void
	 * 
	 **/
	public function de_activation() {
		// Delete activation option in the database
		delete_option( $this->plugin_activation_option_name_base );

		// Keen.io reporting
		$plugin_details = get_plugin_data(__FILE__, false);

		$this->core->keen_reporting(
			'Plugin De-Activations',
			array(
				'action' => 'Plugin De-Activated',
				'plugin_name' => $plugin_details[ 'Name' ],
				'plugin_version' => $plugin_details[ 'Version' ]
			)
		);
	}

	/**
	 * Function to add menu item(s) to the Admin menu
	 *
	 * @param void
	 * @return void
	 */
	public function initialize_menu(){

		// Set up Admin menu group
		add_menu_page(
			__('Agora Middleware 2 Plugin Administration'), 
			__('Middleware 2'),
			'manage_options', 
			$this->core->plugin_admin_page,
			array($this, 'admin_page'), 
			plugin_dir_url( __FILE__ ) . 'img/admin_icon.png',
			98);

		add_submenu_page( 
			$this->core->plugin_admin_page, 
			__('Agora Middleware 2 Language and Variables '), 
			__('Language and Variables'), 
			'manage_options', 
			$this->core->language_admin_page, 
			array($this, 'variable_admin_page'));

//		add_submenu_page(
//			$this->core->plugin_admin_page,
//			__('Rulepoint Event Tracking '),
//			__('Eventing'),
//			'manage_options',
//			$this->core->eventing_admin_page,
//			array($this, 'eventing_admin_page'));

        add_submenu_page(
            $this->core->plugin_admin_page,
            __('Message Central API Settings '),
            __('Message Central'),
            'manage_options',
            $this->core->mc_admin_page,
            array($this, 'mc_admin_page'));
	}

	/**
	 *  Handler for Admin pages
	 *
	 * @param void
	 * @return void
	 */
	public function admin_page(){
		if (!current_user_can('manage_options')) {  
			wp_die('You do not have sufficient permissions to access this page.');  
		}

		//	call the new safe_token function to obscure middleware tokens for display
		$this->core->config['prod_token'] = $this->core->safe_token($this->core->config['prod_token']);
		$this->core->config['uat_token'] = $this->core->safe_token($this->core->config['uat_token']);

		$content = array(
				'menuItems' => apply_filters('agora_middleware_admin_menu', array() ),
				'plugin_admin_page' => $this->core->plugin_admin_page,
				'config' => $this->core->config,
				'config_name' => $this->core->config_name,
				'external_ip' => $this->get_external_ip()
			);
		
		$this->core->view->load('admin_header', $content);
		$this->core->view->load('admin_base_form', $content);
		$this->core->view->load('admin_footer');

	}

//	/**
//	 * eventing_admin_page
//	 *
//     */
//	function eventing_admin_page(){
//		if(!current_user_can('manage_options')){
//			wp_die('You do not have sufficient permissions to access this page');
//		}
//
//		$content = array(
//			'menuItems' => apply_filters('agora_middleware_admin_menu', array() ),
//			'config' => $this->core->event->config,
//			'config_name' => $this->core->event_config_name
//		);
//		$this->core->view->load('admin_header', $content);
//		$this->core->view->load('eventing_admin', $content );
//		$this->core->view->load('admin_footer');
//	}

	/**
	 * mc_admin_page
	 *
	 * Render Message central admin page
     */
	function mc_admin_page(){
        if(!current_user_can('manage_options')) {
			wp_die('You do not have sufficient permissions to access this page');
		}

		//	call the new safe_token function to obscure message central tokens for display
		$this->core->mc->config['mc_token'] = $this->core->safe_token($this->core->mc->config['mc_token']);

        $content = array(
            'menuItems' => apply_filters('agora_middleware_admin_menu', array() ),
            'config' => $this->core->mc->config,
            'config_name' => $this->core->mc_config_name
        );

        $this->core->view->load('admin_header', $content);
        $this->core->view->load('mc_admin', $content );
        $this->core->view->load('admin_footer');

    }

	/**
	*	Admin menu handler
	*
	*	@param void
	*	@return void
	**/
	function variable_admin_page(){
		if (!current_user_can('manage_options')) {  
			wp_die('You do not have sufficient permissions to access this page.');  
		}

		$content = array(
				'menuItems' => apply_filters('agora_middleware_admin_menu', array() ),
				'config' => $this->core->get_language_variable(),
				'config_name' => $this->core->language_config
			);

		$this->core->view->load('admin_header', $content);
		$this->core->view->load('variables_admin', $content );
		$this->core->view->load('admin_footer');
	}

	/**
	 *  Get external IP address
	 *
	 *  Queries icanhazip.com to retrieve the current sites external IP address
	 *
	 * @return string
	 */
	function get_external_ip(){

		$url = 'http://icanhazip.com';

		$result = wp_remote_get($url);
		if(!is_wp_error($result)){
			return wp_remote_retrieve_body($result);
		}else{
			return "Your external IP could not be found.";
		}
	}

	/**
	 *	Ajax method to test middlware connectivity
	 *
	 *	@param void
	 *	@return void
	 **/
	public function ajax_ping_test(){
		$post_call = ( isset( $_POST[ 'call' ] ) ? sanitize_text_field( $_POST[ 'call' ] ) : '' );

		if($post_call == 'ping_test'){
			$result = $this->core->mw->ping_test();
			echo $result;
		}
		die();
	}

	/**
	 *  Function for admin init stuff
	 * 	@param void
	 *	@return void
	 */
	public function admin_initialize(){

		register_setting( $this->core->language_config . '_group', $this->core->language_config);
		register_setting( $this->core->config_name . '_group', $this->core->config_name, array($this->core, '_sanitize_option_input'));
		register_setting( $this->core->event_config_name . '_group', $this->core->event_config_name, array($this->core, '_sanitize_option_input'));
        register_setting( $this->core->mc_config_name . '_group', $this->core->mc_config_name, array($this->core, '_sanitize_option_input'));

	}

	/**
	*	Function to ensure that this plugin is loaded before other plugins in the agora_middleware family
	*
	*	@param void
	*	@return void
	**/
	function _ensure_first_load(){

		$path = str_replace( str_replace('\\','/',WP_PLUGIN_DIR) . '/', '', str_replace('\\','/',__FILE__ ));

		if ( $plugins = get_option( 'active_plugins' ) ) {
		
			if ( $key = array_search( $path, $plugins ) ){
				array_splice( $plugins, $key, 1 );
				array_unshift( $plugins, $path );
				update_option( 'active_plugins', $plugins );
			}
		}
	}

	/**
	 * Callback for importing base options
	 *
	 * @return void
	 */
	function mw_base_import_options_callback() {
		// Check nonce
		$post_nonce_import_base_options = ( ! empty( $_POST[ 'nonce_import_base_options' ] ) ? sanitize_text_field( $_POST[ 'nonce_import_base_options' ] ) : '' );

		if ( $post_nonce_import_base_options && wp_verify_nonce( $post_nonce_import_base_options, 'nonce_import_base_options' ) ) {
			$message_array = array();

			$import_settings_base = '';

			if(isset($_FILES['import_options_base'])){
				$import_json = file_get_contents($_FILES['import_options_base']['tmp_name']);

				$import_settings_base = json_decode(  $import_json );
			}

			// Checking for errors
			if ( empty( $import_settings_base ) ) {
				$message_array['error'] = 'There is nothing to import because no data has been provided.';
			} else {
				// Get middleware authentication and wordpress version numbers
				$plugin_data = get_plugin_data( __FILE__ );
				$plugin_version = $plugin_data['Version'];

				$export_versions = $import_settings_base->versions;

				// Check wordpress/auth plugin versions from the string pasted to ensure they match the current versions
				if ( $plugin_version != $export_versions->mw_base_version ) {
					$error_message = "MiddleWare Base plugin versions from the two set-ups do not match!
				Version of the current MiddleWare Base plugin is: " . $plugin_version . ", version of the
				exported MiddleWare Base plugin is: " . $export_versions->mw_base_version . ".";

					$message_array['error-version'] = $error_message;
				} else {

					// Import Base Config
					if ( get_option( $this->core->config_name ) !== false ) {
						// Remove 'versions' from the object
						unset( $import_settings_base->versions );

						// convert mw_base_settings to array
						$mw_base_settings = json_decode(json_encode($import_settings_base->mw_base_settings ), true);

						// The option already exists, so we just update it.
						$import_options = update_option( $this->core->config_name, $mw_base_settings );

						if (is_wp_error($import_options)) {
							$message_array['error-base'] = 'An error has occurred while importing base settings.';
						} else {
							$message_array['base'] = 'Base settings have been imported successfully!';
						}
					} else {
						$error_message = "An error has occurred while importing base settings.
					Base settings option does not exist in the database! Please update these settings first.";

						$message_array['error-base'] = $error_message;

					}

					// Import MC config
					if ( get_option( $this->core->mc_config_name ) !== false ) {
						if (isset($import_settings_base->mc_options) ) {

							// convert mw_base_settings to array
							$mc_options = json_decode(json_encode($import_settings_base->mc_options), true);

							// The option already exists, so we just update it.
							$import_options = update_option($this->core->mc_config_name, $mc_options);

							if (is_wp_error($import_options)) {;
								$message_array['error-mc-options'] = 'An error has occurred while importing Message Central settings.';
							} else {
								$message_array['mc-options'] = 'Message Central settings have been imported successfully!';
							}
						}
					} else {
						$error_message = "An error has occurred while importing Message Central settings.
					Message Central settings option does not exist in the database! Please update these settings first.";

						$message_array['error-mc-options'] = $error_message;

					}

					// Import Language Variables
					if ( get_option( $this->core->language_config ) !== false ) {
						if(isset($import_settings_base->language_variables)) {
							// convert mw_base_settings to array
							$language_variables = json_decode(json_encode($import_settings_base->language_variables), true);

							// The option already exists, so we just update it.
							$import_options = update_option($this->core->language_config, $language_variables);

							if (is_wp_error($import_options)) {
								$message_array['error-language'] = 'An error has occurred while importing language settings.';
							} else {
								$message_array['language'] = 'Language variables have been imported successfully!';
							}
						}
					} else {
						$error_message = "An error has occurred while importing language variables.
					Language option does not exist in the database! Please update these settings first.";

						$message_array['error-language'] = $error_message;

					}

					//Authentication Plugin
					if(class_exists('agora_authentication_plugin')) {
						// Import Auth config
						if (get_option('agora-middleware-auth-config') !== false) {
							if(isset($import_settings_base->authentication_options)) {
								// convert mw_base_settings to array
								$authentication_options = json_decode(json_encode($import_settings_base->authentication_options), true);

								// The option already exists, so we just update it.
								$import_options = update_option('agora-middleware-auth-config', $authentication_options);

								if (is_wp_error($import_options)) {
									$message_array['error-authentication'] = 'An error has occurred while importing authentication settings.';
								} else {
									$message_array['authentication'] = 'Authentication have been imported successfully!';
								}
							}
						} else {
							$error_message = "An error has occurred while importing Authentication settings.
					Authentication option does not exist in the database! Please update these settings first.";

							$message_array['error-authentication'] = $error_message;

						}

						// Import Social config
						if (get_option('agora-middleware-social-config') !== false) {
							if(isset($import_settings_base->social_options)) {
								// convert mw_base_settings to array
								$social_options = json_decode(json_encode($import_settings_base->social_options), true);

								// The option already exists, so we just update it.
								$import_options = update_option('agora-middleware-social-config', $social_options);

								if (is_wp_error($import_options)) {
									$message_array['error-social-media'] = 'An error has occurred while importing social media settings.';
								} else {
									$message_array['social-media'] = 'Social settings have been imported successfully!';
								}
							}
						} else {
							$error_message = "An error has occurred while importing social media login settings.
					Social media login option does not exist in the database! Please update these settings first.";

							$message_array['error-social-media'] = $error_message;

						}

						// Import pubcodes
						if (!empty($import_settings_base->pubcodes)) {
							$ad_codes = (array) $import_settings_base->advantage_codes;
							foreach($import_settings_base->pubcodes as &$p) {
								$code = new agora_authcode($p);
								$code->term_id = '';
								$code->advantage_code = $ad_codes[$p->name];
								$code->save();
							}
						}
					}
					//end authenticaiton plugin

					// Customer Self Service plugin
					if( class_exists('CSS_Customer_Self_Service') ){
						if (get_option('tfs-customer-self-service-config') !== false) {
							if(isset($import_settings_base->self_service_options )) {
								// convert mw_base_settings to array
								$self_service_options = json_decode(json_encode($import_settings_base->self_service_options), true);

								// The option already exists, so we just update it.
								$self_service_options = update_option('tfs-customer-self-service-config', $self_service_options);

								if (is_wp_error($self_service_options)) {
									$message_array['error-self-service'] = 'An error has occurred while importing customer self service settings.';
								} else {
									$message_array['self-service'] = 'Customer self service settings have been imported successfully!';
								}
							}
						} else {
							$error_message = "An error has occurred while importing customer self service settings.
					Customer self service option does not exist in the database! Please update these settings first.";

							$message_array['error-self-service'] = $error_message;
						}

					}
				}
			}

			$this->core->wp->add_option('agora_mw_import_notices', $message_array);
			//end customer self service plugin
			wp_redirect($_SERVER['REQUEST_URI']);
			exit();
		}
	}

	/**
	 * Shortcode to return mw base options
	 *
	 * @return null/string
	 */
	function mw_export_options() {
		$post_export_options_base = ( ! empty( $_POST[ 'export_options_base' ] ) ? sanitize_text_field( $_POST[ 'export_options_base' ] ) : '' );

		if($post_export_options_base) {
			if(is_admin()){
				// Get base options
				$export_data['mw_base_settings'] = get_option($this->core->config_name);

				if (is_array($export_data)) {
					// Add middleware base and wordpress version numbers to returned object
					$plugin_data = get_plugin_data(__FILE__, false);
					$plugin_version = $plugin_data['Version'];

					global $wp_version;

					$import_versions = array(
						'mw_base_version' => $plugin_version,
						'wp_version' => $wp_version
					);
					$export_data['versions'] = $import_versions;

					$mc_options = get_option($this->core->mc_config_name);
					if($mc_options) {
						$export_data['mc_options'] = $mc_options;
					}

					$language_variables = $this->core->get_language_variable();
					if($language_variables) {
						$export_data['language_variables'] = $language_variables;
					}

					if (class_exists('agora_authentication_plugin')) {
						$authentication_options = get_option('agora-middleware-auth-config');
						if($authentication_options) {
							$export_data['authentication_options'] = $authentication_options;
						}

						$social_options = get_option('agora-middleware-social-config');
						if($social_options) {
							$export_data['social_options'] = $social_options;
						}

						$defaults = array('type' => 'pubcode', 'hide_empty' => false);
						$args = wp_parse_args('', $defaults);
						$pubcodes = get_terms('pubcode', $args);
						//export wp terms for pubcode
						$export_data['pubcodes'] = $pubcodes;

						$codes = array();
						foreach($pubcodes as &$p) {
							$p = new agora_authcode($p);
							$codes[$p->name] = $p->advantage_code;
						}
						$export_data['advantage_codes'] = $codes;
					}

					if(class_exists('CSS_Customer_Self_Service')) {
						$self_service_options = get_option('tfs-customer-self-service-config');
						if($self_service_options) {
							$export_data['self_service_options'] = $self_service_options;
						}
					}

					$json_output = json_encode($export_data);

					$filename = "mw_export_" . date("Y-m-d_H-i", time());
					header("Content-type: application/vnd.ms-excel");
					header("Content-Type: application/force-download");
					header("Content-Type: application/download");
					header("Content-disposition: csv" . date("Y-m-d") . ".json");
					header("Content-disposition: filename=" . $filename . ".json");
					print $json_output;
					exit;
				}
				return;
			}
			return;
		}
		return;
	}

	/**
	 * Create a forgot password mailing and content in MC for WP forgot passwords form
	 *
	 * @return mixed
	 *
	 */
	function create_mailing()
	{
		$post_listcode = ( isset( $_POST[ 'listcode' ] ) ? sanitize_text_field( $_POST[ 'listcode' ] ) : '' );
		$post_mailing = ( isset( $_POST[ 'mailing' ] ) ? sanitize_text_field( $_POST[ 'mailing' ] ) : '' );
		$post_mailing_id = ( isset( $_POST[ 'mailing_id' ] ) ? sanitize_text_field( $_POST[ 'mailing_id' ] ) : '' );

		if($post_listcode != $this->core->mc->config['mc_list']){
			$this->core->mc->config['mc_list'] = $post_listcode;
			update_option('agora_core_framework_config_mc', $this->core->mc->config);
		}
		if($post_mailing != $this->core->mc->config['mc_mailing']){
			$this->core->mc->config['mc_mailing'] = $post_mailing;
			update_option('agora_core_framework_config_mc', $this->core->mc->config);
		}
		if (empty($post_mailing_id)){
			$this->core->mc->config['mc_mailing_id'] = false;
			update_option('agora_core_framework_config_mc', $this->core->mc->config);
		} else if($post_mailing_id != $this->core->mc->config['mc_mailing_id']){
			 $this->core->mc->config['mc_mailing_id'] = $post_mailing_id;
			 update_option('agora_core_framework_config_mc', $this->core->mc->config);
		}

		$response = array();
		$response['status'] = 'error';

		if (!empty($this->core->mc->config['mc_list'])) {
			$listcode = $this->core->mc->config['mc_list'];
			$lists = $this->core->mc->get_all_lists_by_orgid();
			if (empty($lists)) {
				$response['message'] = 'Could not find any listcodes based on your settings';
				die(json_encode($response));
			}

			$list_id = null;
			foreach ($lists as $list) {
				if ($list->name == $listcode) {
					$list_id = $list->agoralistid;
					break;
				}
			}

			if ($list_id == NULL) {
				$response['message'] = 'You do not have a listcode matching your settings';
				die(json_encode($response));
			}
		}

		$content_for_org = $this->core->mc->get_content_by_orgid();
		if (!is_wp_error($content_for_org)) {
			foreach ($content_for_org as $content) {
				if ($content->name == 'wp_forgot_password') {
					$content_id = $content;
					break;
				}
			}
		}
		if (!isset($content_id)) {
			$content = '<html>[% $rv .= $T->te_encode($JSON->{email_body}|| "An Error has occurred."); %]<br></html>';
			$headers = array('To: [%= :prettyTo %]', 'From: ' . $this->core->get_language_variable('txt_forgot_password_email_from'),
				'Subject: ' . $this->core->get_language_variable('txt_forgot_password_username_email_subject'));

			$content_id = $this->core->mc->put_create_content($content, 'wp_forgot_password', $headers);
		}

		if (isset($content_id->cid)) {
			$this->core->mc->config['mc_content_id'] = $content_id->cid;
			update_option('agora_core_framework_config_mc', $this->core->mc->config);
		} else {
			$response['message'] = 'Create content ID failed';
			die(json_encode($response));
		}

		$mc_mailing_name = preg_replace( '/[^A-Za-z0-9-]+/', '-', get_bloginfo( 'name' ) ) . '_wp_forgot_pwd';

		if (!empty($this->core->mc->config['mc_content_id'])) {

			if(!isset($this->core->mc->config['mc_mailing_id']) || empty($this->core->mc->config['mc_mailing_id'])) {
				$mailings = $this->core->mc->get_all_mailings_by_orgid();
				if (!is_wp_error($mailings)) {
					foreach ($mailings as $mailing) {
						if ($mailing->name == $mc_mailing_name) {
							$mailing_id = $mailing->mid;
							break;
						}
					}
				}
				
				if (!isset($mailing_id)) {
					$mailing_id = $this->core->mc->put_create_mailing($mc_mailing_name, $this->core->mc->config['mc_content_id'], '1', 'api-triggered');
					if (is_wp_error($mailing_id)) {
						$response['message'] = 'Create mailing ID failed';
						die(json_encode($response));
					}
					$mailing_id = $mailing_id->mid;
				}
			} else {
				$mailing_id = $this->core->mc->config['mc_mailing_id'];
			}

			$attached_mailing = $this->core->mc->get_mailings_by_list_id_org_id($list_id);
			if (is_array($attached_mailing)) {
				foreach ($attached_mailing as $mailing) {
					if ($mailing->mid == $mailing_id) {
						$check_associate = true;
						break;
					}
				}
			}

			if (!isset($check_associate)) {
				$associate = $this->core->mc->put_associate_mailing_with_agora_list($this->core->mc->config['mc_orgid'], $mailing_id, $list_id);
				if (is_wp_error($associate)) {
					$response['message'] = 'Failed to associate your listcode with your mailing';
					die(json_encode($response));

				}
			}

			if($this->core->mc->config['mc_mailing_id']!== $mailing_id){
				$this->core->mc->config['mc_mailing_id'] = $mailing_id;
				$mailing = $this->core->mc->get_mailing_by_id($this->core->mc->config['mc_mailing_id']);
				$mailing->approved = true;
				$mailing->state = 'approved';
				$mailing->segments = array(array('content' => $this->core->mc->config['mc_content_id']));
				$mailing->list = $list_id;
				$mail_update = $this->core->mc->put_update_mailing($mailing);
				update_option('agora_core_framework_config_mc', $this->core->mc->config);
			}

			$response['status'] = 'success';
			$response['message'] = 'Listname, Mailing ID, and Content ID ready for forgot password mailing';
			die(json_encode($response));
		}
	}

	/**
	*	Function to enqueue scripts and styles for admin page
	*
	*	@param string $hook
	*	@return void
	**/
	function _admin_enqueue($hook){
    	// Don't enqueue stuff if we're not on the right page.
        //TODO: there's got to be a better way to do this...
		wp_enqueue_style( $this->plugin_basename . 'styles_remodal', plugin_dir_url( __FILE__ ) . '/css/remodal.css' );
		wp_enqueue_script( $this->plugin_basename . '_post_remodal', plugin_dir_url( __FILE__ ) . '/js/remodal.js', array('jquery'));

		if(strpos($hook, $this->core->language_admin_page) OR  strpos($hook, $this->core->mc_admin_page) OR strpos($hook, $this->core->plugin_admin_page)){
			wp_enqueue_script( $this->plugin_basename . '_admin', plugin_dir_url( __FILE__ ) . '/js/agora_base_admin.js', array('jquery'));
		}

		if(strpos($hook, $this->core->language_admin_page) OR  strpos($hook, $this->core->mc_admin_page)){
			wp_enqueue_style( $this->plugin_basename . 'styles', plugin_dir_url( __FILE__ ) . '/css/core_admin.css' );
            wp_enqueue_script( 'agora_mc_debug', plugin_dir_url( __FILE__ ) . '/js/mc_status.js' );
            wp_localize_script( 'agora_mc_debug', 'agora_mc_debug', array( 'ajaxurl' => admin_url( 'admin-ajax.php' ) ) );
		} elseif(strpos($hook, $this->core->plugin_admin_page)){
			wp_enqueue_style( $this->plugin_basename . 'styles', plugin_dir_url( __FILE__ ) . '/css/core_admin.css' );
			wp_enqueue_script( 'agora_mw_debug', plugin_dir_url( __FILE__ ) . '/js/mw_status.js' );
			wp_localize_script( 'agora_mw_debug', 'agora_mw_debug', array( 'ajaxurl' => admin_url( 'admin-ajax.php' ) ) );
		}

		return;
	}


	/**
	 * tfs_pageview
	 *
	 * Function to catch all page views within MW plugins
	 *
	 * @param $screen
     */
	public function tfs_pageview( $screen )
	{
		$current = $screen->base;

		if ( strpos( $current, 'middleware' ) > -1 ) {
			if ( strpos( $current, 'customer-self-service' ) > -1 ) {
				$plugin = 'MAD';
			} elseif ( strpos( $current, 'authentication' ) > -1 ) {
				$plugin = 'MW Auth';
			} elseif ( strpos( $current, 'debug' ) > -1 ) {
				$plugin = 'MW Debug';
			} elseif ( strpos( $current, 'support' ) > -1 ) {
				$plugin = 'Support Center';
			} else {
				$plugin = 'MW Base';
			}

			$payload = array(
				'dp' => $GLOBALS[ 'plugin_page' ],//Page
				'dt' => $plugin, // Title
			);

			$this->core->tfs_monitor( $payload, 'Pageview' );
		}
	}
}

$agora_mw_base = new agora_core_framework_plugin;

if(!function_exists('agora')){
	/**
	 * Shortcut function to grab the core framework object
	 * Usage Examples:  core()->user->get_subscriptions();
	 *                  core()->mw->get_aggregate_data_by_login($username, $password);
	 * @return agora_core_framework
	 */
	function agora(){
		return agora_core_framework::get_instance();
	}
}
